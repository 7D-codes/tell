generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    username      String    @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    followings    User[]    @relation(name: "follow")
    followers     User[]    @relation(name: "follow")
    tells         Tell[]
    replies       Reply[]

    @@index([name])
    @@index([username])
}

model Reply {
    replyId        String   @id @default(cuid())
    replyContent   String
    replyAuthorId  String
    author         User     @relation(fields: [replyAuthorId], references: [id], onDelete: Cascade)
    replyToId      String   @unique
    replyTo        Tell     @relation(fields: [replyToId], references: [tellId], onDelete: Cascade)
    replyCreatedAt DateTime @default(now())

    @@unique([replyId, replyCreatedAt])
    @@index([replyId])
}

model Tell {
    tellId             String   @id @default(cuid())
    tellContent        String
    tellAuthorId       String?
    tellAuthorUsername String?
    reply              Reply?
    tellRecipientId    String
    recipient          User     @relation(fields: [tellRecipientId], references: [id], onDelete: Cascade)
    tellCreatedAt      DateTime @default(now())

    @@unique([tellId, tellCreatedAt])
    @@index([tellId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
